<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class AIService
{
    private string $apiKey;
    private string $apiUrl;
    private string $model;

    public function __construct()
    {
        $this->apiKey = config('services.openai.key');
        $this->apiUrl = config('services.openai.url');
        $this->model = config('services.openai.model');
    }

    public function generateText(string $prompt): string
    {
        // Demo mode - remove this section when API is working
        if (config('app.env') === 'local' && env('DEMO_MODE', false)) {
            return "# " . ucfirst($prompt) . "\n\nThis is a demo blog post about " . strtolower($prompt) . ". In a real application, this content would be generated by OpenAI's GPT model.\n\nThe blog post would include:\n- Introduction to the topic\n- Main points and analysis\n- Practical examples\n- Conclusion with actionable insights\n\nThis demo shows that your Laravel application is working correctly and will generate real AI content once the OpenAI API rate limits are resolved.";
        }
        
        try {
            // Validate API key
            if (empty($this->apiKey)) {
                throw new \Exception('OpenAI API key is not configured. Please set OPENAI_API_KEY in your .env file.');
            }

            // Prepare the request data
            $requestData = [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => 'You are a helpful blog content generator. Create engaging, informative blog posts based on the given prompts. Format your response with proper paragraphs and structure.'
                    ],
                    [
                        'role' => 'user',
                        'content' => "Write a short blog post about: {$prompt}"
                    ]
                ],
                'max_tokens' => 300,  // Reduced from 1000 to be more economical
                'temperature' => 0.7
            ];

            // Make the API request
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->timeout(30)->post($this->apiUrl . '/chat/completions', $requestData);

            // Check if request was successful
            if (!$response->successful()) {
                $errorBody = $response->body();
                Log::error('OpenAI API Error', [
                    'status' => $response->status(),
                    'body' => $errorBody
                ]);
                
                // Handle specific error codes
                switch ($response->status()) {
                    case 429:
                        throw new \Exception('Rate limit exceeded. Please wait a moment and try again.');
                    case 401:
                        throw new \Exception('Invalid API key. Please check your OpenAI API key configuration.');
                    case 402:
                        throw new \Exception('Insufficient credits. Please check your OpenAI billing.');
                    default:
                        throw new \Exception('OpenAI API request failed with status: ' . $response->status() . ' - ' . $errorBody);
                }
            }

            $data = $response->json();

            // Extract the generated content
            if (isset($data['choices'][0]['message']['content'])) {
                return trim($data['choices'][0]['message']['content']);
            } else {
                throw new \Exception('Unexpected response format from OpenAI API');
            }

        } catch (\Exception $e) {
            Log::error('AI Service Error', [
                'message' => $e->getMessage(),
                'prompt' => $prompt
            ]);
            
            // Return simple error message
            return "API Error: " . $e->getMessage();
        }
    }
}
